def translate(DNAseq):
    
    """ Translate a string containing a nucleotide sequence into a string containing the corresponding sequence of amino acids . 
        Nucleotides are translated in triplets using the table dictionary and converted into corresponding amino acid.
        This sequence of amino acid is returned. """
    
    translation_table = {
    'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M',
    'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T',
    'AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K',
    'AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R',
    'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L',
    'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P',
    'CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q',
    'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R',
    'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V',
    'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A',
    'GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E',
    'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G',
    'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S',
    'TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L',
    'TAC':'Y', 'TAT':'Y', 'TAA':'_', 'TAG':'_',
    'TGC':'C', 'TGT':'C', 'TGA':'_', 'TGG':'W',
    }
    
    
    amino_acids=""
    if( ( len(DNAseq) % 3 ) == 0 ):
        for i in range(0,len(DNAseq),3):
            seq = DNAseq[i:i+3]
            amino_acids += translation_table[seq]
            
        return amino_acids
    
    
    else:
        return "Invalid Sequence Given."

        
def purify_seq(seq):
    """ Given sequence is purified, i.e. extra characters like '\\n' & '\\r' are removed from the sequence.
        This purified sequence is returned to the calling function. """
        
    seq = seq.replace("\n","")
    seq = seq.replace("\r","")
    return seq
    
def generate_protien_seq(DNAfile):
    
    """ Main function to be called.
        Takes an argument of .txt file name (file containing nucleotide sequence) and returns corresponding sequence of amino acid. """
    
    obj = open(DNAfile,"r")
    seq = obj.read()
    seq = purify_seq(seq)
    protien_seq = translate( seq[20:938] )[ : -1]
    return protien_seq
    



# Useful code for testing.
# It tests for equality between result generated by above functions and orignal sequence of amino acid present in the file Protien.txt.

obj = open("Protiens.txt","r")    # Protiens.txt contains sequence of amino acid's corresponding to necleotide's 
                                  # sequence present in DNA.txt
s=obj.read()
s=purify_seq(s)
if s==generate_protien_seq("DNA.txt"):  # DNA.txt contains sequence of nucleotide's corresponding 
                                        # to amino acid's sequence present in Protiens.txt
    
    print "Success : Sequence generated matches with the answer ie. Protien.txt file."  # will get printed only if 
                                                                                        # generated amino acid sequence matches with 
                                                                                        # the correct sequence present in Protiens.txt




        
